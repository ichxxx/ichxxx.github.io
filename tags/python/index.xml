<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on ichx&#39;s Blog</title>
    <link>https://ichxxx.github.io/tags/python/</link>
    <description>Recent content in Python on ichx&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 24 Dec 2019 23:41:44 +0800</lastBuildDate><atom:link href="https://ichxxx.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python中引用和对象的理解</title>
      <link>https://ichxxx.github.io/post/python%E4%B8%AD%E5%BC%95%E7%94%A8%E5%92%8C%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%90%86%E8%A7%A3/</link>
      <pubDate>Tue, 24 Dec 2019 23:41:44 +0800</pubDate>
      
      <guid>https://ichxxx.github.io/post/python%E4%B8%AD%E5%BC%95%E7%94%A8%E5%92%8C%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%90%86%E8%A7%A3/</guid>
      <description>Python中引用和对象是分离的。 在Python中，如果要使用一个变量，不需要提前进行声明，只需要在用的时候，给这个变量赋值即可。（这一点和C等静态类型语言不同，Python为动态类型语言） 第一个例子： a = 1 这是一个简单的赋值语句，整数 1 为一个对象，a 是一个引用，利用赋值语句，引</description>
    </item>
    
    <item>
      <title>Python代码技巧</title>
      <link>https://ichxxx.github.io/post/python%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Tue, 24 Dec 2019 23:39:01 +0800</pubDate>
      
      <guid>https://ichxxx.github.io/post/python%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7/</guid>
      <description>交换值 a, b = 5, 10 a, b = b, a print(a,b) # 10 5 连接列表所有元素为一个字符串 a = [&amp;#39;Python&amp;#39;, &amp;#39;is&amp;#39;, &amp;#39;awesome&amp;#39;] print(&amp;#39; &amp;#39;.join(a)) # Python is awesome 寻找列表中频数最高的值 a = [1,2,3,1,2,3,2,2,4,5,1] f = max(set(a), key = a.count) print(f) # 2 判断两个字符串是否回文 from collections import Counter Counter(str1) == Counter(str2) 反转字符串/列表 a = &amp;#39;abcdefghijklmn&amp;#39; b = [1, 2, 3, 4, 5] print(a[::-1]) # nmlkjihgfedcba print(b[::-1]) # [5, 4, 3, 2, 1] 转置二维数组 a = [[&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;], [&amp;#39;c&amp;#39;, &amp;#39;d&amp;#39;], [&amp;#39;e&amp;#39;, &amp;#39;f&amp;#39;]] a_t = zip(*a) print(list(a_t)) # [(&amp;#39;a&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;e&amp;#39;), (&amp;#39;b&amp;#39;, &amp;#39;d&amp;#39;, &amp;#39;f&amp;#39;)] 链式比较</description>
    </item>
    
  </channel>
</rss>
